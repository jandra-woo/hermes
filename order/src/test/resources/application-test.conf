akka {
  actor {
    provider = "local"

    serializers {
      avro = "com.jandra.hermes.serializer.AvroSerializer"
      java = "akka.serialization.JavaSerializer"
      jackson-json = "akka.serialization.jackson.JacksonJsonSerializer"
      jackson-cbor = "akka.serialization.jackson.JacksonCborSerializer"
      proto = "akka.remote.serialization.ProtobufSerializer"
    }

    serialization-bindings {
      //      "java.io.Serializable" = none
      "com.jandra.hermes.common.util.CborSerializable" = jackson-cbor
    }

    deployment {
      /worker {
        dispatcher = my-dispatcher
      }
      /parent/orderRouter {
        router = round-robin-pool
        nr-of-instances = 5
      }
    }
  }

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  loglevel = "INFO"

  log-dead-letters = 10
  log-dead-letters-during-shutdown = off

  remote {
    artery {
      enabled = on
      transport = tcp
      canonical.hostname = "127.0.0.1"
      canonical.port = 25530
    }
  }


  coordinated-shutdown.terminate-actor-system = on

  extensions = ["akka.cluster.client.ClusterClientReceptionist"]
  facility-contact-points = ["akka://hermes@127.0.0.1:2551/system/receptionist", "akka://hermes@127.0.0.1:2552/system/receptionist"]

  management {
    http {
      hostname = "127.0.0.1"
      port = 8558
    }
  }

  extensions = [akka.persistence.Persistence]

  persistence {

    journal {
      plugin = "akka.persistence.journal.inmem"
    }

    snapshot-store {
      plugin = "akka.persistence.snapshot-store.local"
      auto-start-snapshot-stores = ["akka.persistence.snapshot-store.local"]
      local.dir = "target/snapshots"
    }
  }
}

slick-postgres {
  profile = "slick.jdbc.PostgresProfile$"
  db {
    dataSourceClass = "slick.jdbc.DriverDataSource"
    properties = {
      driver = "org.postgresql.Driver"
      url = "jdbc:postgresql://127.0.0.1/demo"
      user = "postgres"
      password = "Password01"
    }
    numThreads = 5
    connectionTimeout = 5000
    maximumPoolSize = 5
  }
}

my-dispatcher {
  type = Dispatcher
  executor = "fork-join-executor"
  fork-join-executor {
    parallelism-min = 2
    parallelism-factor = 2.0
    parallelism-max = 10
  }
}
